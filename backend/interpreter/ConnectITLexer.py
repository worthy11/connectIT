# Generated from ConnectIT.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,347,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,
        1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,5,35,247,8,35,10,35,12,35,250,9,35,1,36,
        3,36,253,8,36,1,36,4,36,256,8,36,11,36,12,36,257,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,270,8,37,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,306,8,38,1,38,1,38,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,3,39,332,8,39,1,39,1,39,1,40,4,40,
        337,8,40,11,40,12,40,338,1,40,1,40,1,41,3,41,344,8,41,1,41,1,41,
        0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,4,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,9,9,32,32,
        361,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,
        7,91,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,104,1,0,0,0,15,106,1,
        0,0,0,17,108,1,0,0,0,19,111,1,0,0,0,21,115,1,0,0,0,23,117,1,0,0,
        0,25,119,1,0,0,0,27,121,1,0,0,0,29,126,1,0,0,0,31,129,1,0,0,0,33,
        137,1,0,0,0,35,142,1,0,0,0,37,155,1,0,0,0,39,157,1,0,0,0,41,160,
        1,0,0,0,43,162,1,0,0,0,45,165,1,0,0,0,47,168,1,0,0,0,49,171,1,0,
        0,0,51,178,1,0,0,0,53,184,1,0,0,0,55,191,1,0,0,0,57,199,1,0,0,0,
        59,206,1,0,0,0,61,211,1,0,0,0,63,217,1,0,0,0,65,223,1,0,0,0,67,229,
        1,0,0,0,69,236,1,0,0,0,71,244,1,0,0,0,73,252,1,0,0,0,75,269,1,0,
        0,0,77,271,1,0,0,0,79,309,1,0,0,0,81,336,1,0,0,0,83,343,1,0,0,0,
        85,86,5,63,0,0,86,2,1,0,0,0,87,88,5,44,0,0,88,4,1,0,0,0,89,90,5,
        61,0,0,90,6,1,0,0,0,91,92,5,45,0,0,92,93,5,45,0,0,93,94,5,62,0,0,
        94,8,1,0,0,0,95,96,5,43,0,0,96,10,1,0,0,0,97,98,5,67,0,0,98,99,5,
        76,0,0,99,100,5,79,0,0,100,101,5,83,0,0,101,102,5,69,0,0,102,103,
        5,68,0,0,103,12,1,0,0,0,104,105,5,91,0,0,105,14,1,0,0,0,106,107,
        5,93,0,0,107,16,1,0,0,0,108,109,5,60,0,0,109,110,5,45,0,0,110,18,
        1,0,0,0,111,112,5,60,0,0,112,113,5,60,0,0,113,114,5,45,0,0,114,20,
        1,0,0,0,115,116,5,40,0,0,116,22,1,0,0,0,117,118,5,41,0,0,118,24,
        1,0,0,0,119,120,5,45,0,0,120,26,1,0,0,0,121,122,5,83,0,0,122,123,
        5,72,0,0,123,124,5,79,0,0,124,125,5,87,0,0,125,28,1,0,0,0,126,127,
        5,73,0,0,127,128,5,70,0,0,128,30,1,0,0,0,129,130,5,69,0,0,130,131,
        5,76,0,0,131,132,5,83,0,0,132,133,5,69,0,0,133,134,5,32,0,0,134,
        135,5,73,0,0,135,136,5,70,0,0,136,32,1,0,0,0,137,138,5,69,0,0,138,
        139,5,76,0,0,139,140,5,83,0,0,140,141,5,69,0,0,141,34,1,0,0,0,142,
        143,5,82,0,0,143,144,5,69,0,0,144,145,5,80,0,0,145,146,5,69,0,0,
        146,147,5,65,0,0,147,148,5,84,0,0,148,149,5,32,0,0,149,150,5,87,
        0,0,150,151,5,72,0,0,151,152,5,73,0,0,152,153,5,76,0,0,153,154,5,
        69,0,0,154,36,1,0,0,0,155,156,5,60,0,0,156,38,1,0,0,0,157,158,5,
        60,0,0,158,159,5,61,0,0,159,40,1,0,0,0,160,161,5,62,0,0,161,42,1,
        0,0,0,162,163,5,62,0,0,163,164,5,61,0,0,164,44,1,0,0,0,165,166,5,
        61,0,0,166,167,5,61,0,0,167,46,1,0,0,0,168,169,5,33,0,0,169,170,
        5,61,0,0,170,48,1,0,0,0,171,172,5,82,0,0,172,173,5,69,0,0,173,174,
        5,80,0,0,174,175,5,69,0,0,175,176,5,65,0,0,176,177,5,84,0,0,177,
        50,1,0,0,0,178,179,5,84,0,0,179,180,5,73,0,0,180,181,5,77,0,0,181,
        182,5,69,0,0,182,183,5,83,0,0,183,52,1,0,0,0,184,185,5,77,0,0,185,
        186,5,69,0,0,186,187,5,84,0,0,187,188,5,72,0,0,188,189,5,79,0,0,
        189,190,5,68,0,0,190,54,1,0,0,0,191,192,5,82,0,0,192,193,5,69,0,
        0,193,194,5,84,0,0,194,195,5,85,0,0,195,196,5,82,0,0,196,197,5,78,
        0,0,197,198,5,83,0,0,198,56,1,0,0,0,199,200,5,82,0,0,200,201,5,69,
        0,0,201,202,5,84,0,0,202,203,5,85,0,0,203,204,5,82,0,0,204,205,5,
        78,0,0,205,58,1,0,0,0,206,207,5,85,0,0,207,208,5,78,0,0,208,209,
        5,73,0,0,209,210,5,84,0,0,210,60,1,0,0,0,211,212,5,76,0,0,212,213,
        5,65,0,0,213,214,5,89,0,0,214,215,5,69,0,0,215,216,5,82,0,0,216,
        62,1,0,0,0,217,218,5,83,0,0,218,219,5,72,0,0,219,220,5,65,0,0,220,
        221,5,80,0,0,221,222,5,69,0,0,222,64,1,0,0,0,223,224,5,77,0,0,224,
        225,5,79,0,0,225,226,5,68,0,0,226,227,5,69,0,0,227,228,5,76,0,0,
        228,66,1,0,0,0,229,230,5,78,0,0,230,231,5,85,0,0,231,232,5,77,0,
        0,232,233,5,66,0,0,233,234,5,69,0,0,234,235,5,82,0,0,235,68,1,0,
        0,0,236,237,5,66,0,0,237,238,5,79,0,0,238,239,5,79,0,0,239,240,5,
        76,0,0,240,241,5,69,0,0,241,242,5,65,0,0,242,243,5,78,0,0,243,70,
        1,0,0,0,244,248,7,0,0,0,245,247,7,1,0,0,246,245,1,0,0,0,247,250,
        1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,72,1,0,0,0,250,248,1,
        0,0,0,251,253,5,45,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,255,1,
        0,0,0,254,256,7,2,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,
        0,0,0,257,258,1,0,0,0,258,74,1,0,0,0,259,260,5,84,0,0,260,261,5,
        82,0,0,261,262,5,85,0,0,262,270,5,69,0,0,263,264,5,70,0,0,264,265,
        5,65,0,0,265,266,5,76,0,0,266,267,5,83,0,0,267,270,5,69,0,0,268,
        270,2,48,49,0,269,259,1,0,0,0,269,263,1,0,0,0,269,268,1,0,0,0,270,
        76,1,0,0,0,271,305,5,42,0,0,272,273,5,114,0,0,273,274,5,101,0,0,
        274,306,5,100,0,0,275,276,5,98,0,0,276,277,5,108,0,0,277,278,5,117,
        0,0,278,306,5,101,0,0,279,280,5,103,0,0,280,281,5,114,0,0,281,282,
        5,101,0,0,282,283,5,101,0,0,283,306,5,110,0,0,284,285,5,119,0,0,
        285,286,5,104,0,0,286,287,5,105,0,0,287,288,5,116,0,0,288,306,5,
        101,0,0,289,290,5,98,0,0,290,291,5,108,0,0,291,292,5,97,0,0,292,
        293,5,99,0,0,293,306,5,107,0,0,294,295,5,121,0,0,295,296,5,101,0,
        0,296,297,5,108,0,0,297,298,5,108,0,0,298,299,5,111,0,0,299,306,
        5,119,0,0,300,301,5,108,0,0,301,302,5,105,0,0,302,303,5,108,0,0,
        303,304,5,97,0,0,304,306,5,99,0,0,305,272,1,0,0,0,305,275,1,0,0,
        0,305,279,1,0,0,0,305,284,1,0,0,0,305,289,1,0,0,0,305,294,1,0,0,
        0,305,300,1,0,0,0,306,307,1,0,0,0,307,308,5,42,0,0,308,78,1,0,0,
        0,309,331,5,42,0,0,310,311,5,115,0,0,311,312,5,116,0,0,312,313,5,
        114,0,0,313,314,5,105,0,0,314,315,5,112,0,0,315,316,5,101,0,0,316,
        332,5,100,0,0,317,318,5,100,0,0,318,319,5,111,0,0,319,320,5,116,
        0,0,320,321,5,116,0,0,321,322,5,101,0,0,322,332,5,100,0,0,323,324,
        5,103,0,0,324,325,5,114,0,0,325,326,5,97,0,0,326,327,5,100,0,0,327,
        328,5,105,0,0,328,329,5,101,0,0,329,330,5,110,0,0,330,332,5,116,
        0,0,331,310,1,0,0,0,331,317,1,0,0,0,331,323,1,0,0,0,332,333,1,0,
        0,0,333,334,5,42,0,0,334,80,1,0,0,0,335,337,7,3,0,0,336,335,1,0,
        0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,340,1,0,
        0,0,340,341,6,40,0,0,341,82,1,0,0,0,342,344,5,13,0,0,343,342,1,0,
        0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,5,10,0,0,346,84,1,0,
        0,0,9,0,248,252,257,269,305,331,338,343,1,6,0,0
    ]

class ConnectITLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    ID = 36
    NUMBER = 37
    BOOLEAN = 38
    COLOR = 39
    PATTERN = 40
    WS = 41
    NEWLINE = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'?'", "','", "'='", "'-->'", "'+'", "'CLOSED'", "'['", "']'", 
            "'<-'", "'<<-'", "'('", "')'", "'-'", "'SHOW'", "'IF'", "'ELSE IF'", 
            "'ELSE'", "'REPEAT WHILE'", "'<'", "'<='", "'>'", "'>='", "'=='", 
            "'!='", "'REPEAT'", "'TIMES'", "'METHOD'", "'RETURNS'", "'RETURN'", 
            "'UNIT'", "'LAYER'", "'SHAPE'", "'MODEL'", "'NUMBER'", "'BOOLEAN'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "BOOLEAN", "COLOR", "PATTERN", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "ID", "NUMBER", "BOOLEAN", 
                  "COLOR", "PATTERN", "WS", "NEWLINE" ]

    grammarFileName = "ConnectIT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


