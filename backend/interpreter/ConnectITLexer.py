# Generated from ConnectIT.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,60,457,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,
        1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
        37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,4,45,332,
        8,45,11,45,12,45,333,1,45,1,45,1,46,3,46,339,8,46,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,372,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        407,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,430,8,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,441,8,57,1,58,
        3,58,444,8,58,1,58,4,58,447,8,58,11,58,12,58,448,1,59,1,59,5,59,
        453,8,59,10,59,12,59,456,9,59,0,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        1,0,4,2,0,9,9,32,32,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,475,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,0,3,123,1,0,0,0,5,125,1,
        0,0,0,7,127,1,0,0,0,9,130,1,0,0,0,11,133,1,0,0,0,13,136,1,0,0,0,
        15,139,1,0,0,0,17,144,1,0,0,0,19,148,1,0,0,0,21,153,1,0,0,0,23,158,
        1,0,0,0,25,161,1,0,0,0,27,167,1,0,0,0,29,174,1,0,0,0,31,176,1,0,
        0,0,33,178,1,0,0,0,35,180,1,0,0,0,37,182,1,0,0,0,39,187,1,0,0,0,
        41,190,1,0,0,0,43,194,1,0,0,0,45,197,1,0,0,0,47,200,1,0,0,0,49,203,
        1,0,0,0,51,208,1,0,0,0,53,211,1,0,0,0,55,219,1,0,0,0,57,224,1,0,
        0,0,59,237,1,0,0,0,61,244,1,0,0,0,63,250,1,0,0,0,65,257,1,0,0,0,
        67,265,1,0,0,0,69,272,1,0,0,0,71,277,1,0,0,0,73,283,1,0,0,0,75,289,
        1,0,0,0,77,295,1,0,0,0,79,302,1,0,0,0,81,310,1,0,0,0,83,314,1,0,
        0,0,85,317,1,0,0,0,87,321,1,0,0,0,89,325,1,0,0,0,91,331,1,0,0,0,
        93,338,1,0,0,0,95,342,1,0,0,0,97,344,1,0,0,0,99,346,1,0,0,0,101,
        350,1,0,0,0,103,353,1,0,0,0,105,357,1,0,0,0,107,359,1,0,0,0,109,
        371,1,0,0,0,111,406,1,0,0,0,113,429,1,0,0,0,115,440,1,0,0,0,117,
        443,1,0,0,0,119,450,1,0,0,0,121,122,5,63,0,0,122,2,1,0,0,0,123,124,
        5,44,0,0,124,4,1,0,0,0,125,126,5,61,0,0,126,6,1,0,0,0,127,128,5,
        43,0,0,128,129,5,61,0,0,129,8,1,0,0,0,130,131,5,45,0,0,131,132,5,
        61,0,0,132,10,1,0,0,0,133,134,5,42,0,0,134,135,5,61,0,0,135,12,1,
        0,0,0,136,137,5,47,0,0,137,138,5,61,0,0,138,14,1,0,0,0,139,140,5,
        60,0,0,140,141,5,43,0,0,141,142,5,45,0,0,142,143,5,62,0,0,143,16,
        1,0,0,0,144,145,5,60,0,0,145,146,5,43,0,0,146,147,5,45,0,0,147,18,
        1,0,0,0,148,149,5,60,0,0,149,150,5,60,0,0,150,151,5,43,0,0,151,152,
        5,45,0,0,152,20,1,0,0,0,153,154,5,60,0,0,154,155,5,43,0,0,155,156,
        5,45,0,0,156,157,5,40,0,0,157,22,1,0,0,0,158,159,5,41,0,0,159,160,
        5,45,0,0,160,24,1,0,0,0,161,162,5,60,0,0,162,163,5,60,0,0,163,164,
        5,43,0,0,164,165,5,45,0,0,165,166,5,40,0,0,166,26,1,0,0,0,167,168,
        5,67,0,0,168,169,5,76,0,0,169,170,5,79,0,0,170,171,5,83,0,0,171,
        172,5,69,0,0,172,173,5,68,0,0,173,28,1,0,0,0,174,175,5,40,0,0,175,
        30,1,0,0,0,176,177,5,41,0,0,177,32,1,0,0,0,178,179,5,91,0,0,179,
        34,1,0,0,0,180,181,5,93,0,0,181,36,1,0,0,0,182,183,5,66,0,0,183,
        184,5,69,0,0,184,185,5,78,0,0,185,186,5,68,0,0,186,38,1,0,0,0,187,
        188,5,73,0,0,188,189,5,78,0,0,189,40,1,0,0,0,190,191,5,79,0,0,191,
        192,5,85,0,0,192,193,5,84,0,0,193,42,1,0,0,0,194,195,5,66,0,0,195,
        196,5,89,0,0,196,44,1,0,0,0,197,198,5,65,0,0,198,199,5,84,0,0,199,
        46,1,0,0,0,200,201,5,84,0,0,201,202,5,79,0,0,202,48,1,0,0,0,203,
        204,5,83,0,0,204,205,5,72,0,0,205,206,5,79,0,0,206,207,5,87,0,0,
        207,50,1,0,0,0,208,209,5,73,0,0,209,210,5,70,0,0,210,52,1,0,0,0,
        211,212,5,69,0,0,212,213,5,76,0,0,213,214,5,83,0,0,214,215,5,69,
        0,0,215,216,5,32,0,0,216,217,5,73,0,0,217,218,5,70,0,0,218,54,1,
        0,0,0,219,220,5,69,0,0,220,221,5,76,0,0,221,222,5,83,0,0,222,223,
        5,69,0,0,223,56,1,0,0,0,224,225,5,82,0,0,225,226,5,69,0,0,226,227,
        5,80,0,0,227,228,5,69,0,0,228,229,5,65,0,0,229,230,5,84,0,0,230,
        231,5,32,0,0,231,232,5,87,0,0,232,233,5,72,0,0,233,234,5,73,0,0,
        234,235,5,76,0,0,235,236,5,69,0,0,236,58,1,0,0,0,237,238,5,82,0,
        0,238,239,5,69,0,0,239,240,5,80,0,0,240,241,5,69,0,0,241,242,5,65,
        0,0,242,243,5,84,0,0,243,60,1,0,0,0,244,245,5,84,0,0,245,246,5,73,
        0,0,246,247,5,77,0,0,247,248,5,69,0,0,248,249,5,83,0,0,249,62,1,
        0,0,0,250,251,5,77,0,0,251,252,5,69,0,0,252,253,5,84,0,0,253,254,
        5,72,0,0,254,255,5,79,0,0,255,256,5,68,0,0,256,64,1,0,0,0,257,258,
        5,82,0,0,258,259,5,69,0,0,259,260,5,84,0,0,260,261,5,85,0,0,261,
        262,5,82,0,0,262,263,5,78,0,0,263,264,5,83,0,0,264,66,1,0,0,0,265,
        266,5,82,0,0,266,267,5,69,0,0,267,268,5,84,0,0,268,269,5,85,0,0,
        269,270,5,82,0,0,270,271,5,78,0,0,271,68,1,0,0,0,272,273,5,85,0,
        0,273,274,5,78,0,0,274,275,5,73,0,0,275,276,5,84,0,0,276,70,1,0,
        0,0,277,278,5,76,0,0,278,279,5,65,0,0,279,280,5,89,0,0,280,281,5,
        69,0,0,281,282,5,82,0,0,282,72,1,0,0,0,283,284,5,83,0,0,284,285,
        5,72,0,0,285,286,5,65,0,0,286,287,5,80,0,0,287,288,5,69,0,0,288,
        74,1,0,0,0,289,290,5,77,0,0,290,291,5,79,0,0,291,292,5,68,0,0,292,
        293,5,69,0,0,293,294,5,76,0,0,294,76,1,0,0,0,295,296,5,78,0,0,296,
        297,5,85,0,0,297,298,5,77,0,0,298,299,5,66,0,0,299,300,5,69,0,0,
        300,301,5,82,0,0,301,78,1,0,0,0,302,303,5,66,0,0,303,304,5,79,0,
        0,304,305,5,79,0,0,305,306,5,76,0,0,306,307,5,69,0,0,307,308,5,65,
        0,0,308,309,5,78,0,0,309,80,1,0,0,0,310,311,5,60,0,0,311,312,5,45,
        0,0,312,313,5,62,0,0,313,82,1,0,0,0,314,315,5,60,0,0,315,316,5,45,
        0,0,316,84,1,0,0,0,317,318,5,60,0,0,318,319,5,60,0,0,319,320,5,45,
        0,0,320,86,1,0,0,0,321,322,5,60,0,0,322,323,5,45,0,0,323,324,5,40,
        0,0,324,88,1,0,0,0,325,326,5,60,0,0,326,327,5,60,0,0,327,328,5,45,
        0,0,328,329,5,40,0,0,329,90,1,0,0,0,330,332,7,0,0,0,331,330,1,0,
        0,0,332,333,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,335,1,0,
        0,0,335,336,6,45,0,0,336,92,1,0,0,0,337,339,5,13,0,0,338,337,1,0,
        0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,5,10,0,0,341,94,1,0,
        0,0,342,343,5,43,0,0,343,96,1,0,0,0,344,345,5,45,0,0,345,98,1,0,
        0,0,346,347,5,78,0,0,347,348,5,79,0,0,348,349,5,84,0,0,349,100,1,
        0,0,0,350,351,5,79,0,0,351,352,5,82,0,0,352,102,1,0,0,0,353,354,
        5,65,0,0,354,355,5,78,0,0,355,356,5,68,0,0,356,104,1,0,0,0,357,358,
        5,42,0,0,358,106,1,0,0,0,359,360,5,47,0,0,360,108,1,0,0,0,361,372,
        5,60,0,0,362,363,5,60,0,0,363,372,5,61,0,0,364,372,5,62,0,0,365,
        366,5,62,0,0,366,372,5,61,0,0,367,368,5,61,0,0,368,372,5,61,0,0,
        369,370,5,33,0,0,370,372,5,61,0,0,371,361,1,0,0,0,371,362,1,0,0,
        0,371,364,1,0,0,0,371,365,1,0,0,0,371,367,1,0,0,0,371,369,1,0,0,
        0,372,110,1,0,0,0,373,374,5,82,0,0,374,375,5,69,0,0,375,407,5,68,
        0,0,376,377,5,66,0,0,377,378,5,76,0,0,378,379,5,85,0,0,379,407,5,
        69,0,0,380,381,5,71,0,0,381,382,5,82,0,0,382,383,5,69,0,0,383,384,
        5,69,0,0,384,407,5,78,0,0,385,386,5,87,0,0,386,387,5,72,0,0,387,
        388,5,73,0,0,388,389,5,84,0,0,389,407,5,69,0,0,390,391,5,66,0,0,
        391,392,5,76,0,0,392,393,5,65,0,0,393,394,5,67,0,0,394,407,5,75,
        0,0,395,396,5,89,0,0,396,397,5,69,0,0,397,398,5,76,0,0,398,399,5,
        76,0,0,399,400,5,79,0,0,400,407,5,87,0,0,401,402,5,76,0,0,402,403,
        5,73,0,0,403,404,5,76,0,0,404,405,5,65,0,0,405,407,5,67,0,0,406,
        373,1,0,0,0,406,376,1,0,0,0,406,380,1,0,0,0,406,385,1,0,0,0,406,
        390,1,0,0,0,406,395,1,0,0,0,406,401,1,0,0,0,407,112,1,0,0,0,408,
        409,5,83,0,0,409,410,5,84,0,0,410,411,5,82,0,0,411,412,5,73,0,0,
        412,413,5,80,0,0,413,414,5,69,0,0,414,430,5,68,0,0,415,416,5,68,
        0,0,416,417,5,79,0,0,417,418,5,84,0,0,418,419,5,84,0,0,419,420,5,
        69,0,0,420,430,5,68,0,0,421,422,5,71,0,0,422,423,5,82,0,0,423,424,
        5,65,0,0,424,425,5,68,0,0,425,426,5,73,0,0,426,427,5,69,0,0,427,
        428,5,78,0,0,428,430,5,84,0,0,429,408,1,0,0,0,429,415,1,0,0,0,429,
        421,1,0,0,0,430,114,1,0,0,0,431,432,5,84,0,0,432,433,5,82,0,0,433,
        434,5,85,0,0,434,441,5,69,0,0,435,436,5,70,0,0,436,437,5,65,0,0,
        437,438,5,76,0,0,438,439,5,83,0,0,439,441,5,69,0,0,440,431,1,0,0,
        0,440,435,1,0,0,0,441,116,1,0,0,0,442,444,5,45,0,0,443,442,1,0,0,
        0,443,444,1,0,0,0,444,446,1,0,0,0,445,447,7,1,0,0,446,445,1,0,0,
        0,447,448,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,118,1,0,0,
        0,450,454,7,2,0,0,451,453,7,3,0,0,452,451,1,0,0,0,453,456,1,0,0,
        0,454,452,1,0,0,0,454,455,1,0,0,0,455,120,1,0,0,0,456,454,1,0,0,
        0,10,0,333,338,371,406,429,440,443,448,454,1,6,0,0
    ]

class ConnectITLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    WS = 46
    NEWLINE = 47
    PLUS = 48
    MINUS = 49
    NOT = 50
    OR = 51
    AND = 52
    MUL = 53
    DIV = 54
    COMPARATOR = 55
    COLOR = 56
    PATTERN = 57
    BOOLEAN = 58
    NUMBER = 59
    ID = 60

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'?'", "','", "'='", "'+='", "'-='", "'*='", "'/='", "'<+->'", 
            "'<+-'", "'<<+-'", "'<+-('", "')-'", "'<<+-('", "'CLOSED'", 
            "'('", "')'", "'['", "']'", "'BEND'", "'IN'", "'OUT'", "'BY'", 
            "'AT'", "'TO'", "'SHOW'", "'IF'", "'ELSE IF'", "'ELSE'", "'REPEAT WHILE'", 
            "'REPEAT'", "'TIMES'", "'METHOD'", "'RETURNS'", "'RETURN'", 
            "'UNIT'", "'LAYER'", "'SHAPE'", "'MODEL'", "'NUMBER'", "'BOOLEAN'", 
            "'<->'", "'<-'", "'<<-'", "'<-('", "'<<-('", "'+'", "'-'", "'NOT'", 
            "'OR'", "'AND'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "NEWLINE", "PLUS", "MINUS", "NOT", "OR", "AND", "MUL", 
            "DIV", "COMPARATOR", "COLOR", "PATTERN", "BOOLEAN", "NUMBER", 
            "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "WS", "NEWLINE", "PLUS", "MINUS", "NOT", "OR", 
                  "AND", "MUL", "DIV", "COMPARATOR", "COLOR", "PATTERN", 
                  "BOOLEAN", "NUMBER", "ID" ]

    grammarFileName = "ConnectIT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


